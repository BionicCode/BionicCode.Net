<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>BionicCode.Utilities.Net.Framework.Wpf</name>
  </assembly>
  <members>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand">
      <summary>
            A  reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand" /> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.Execute" />, <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsync" /> and <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" /></summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Action)">
      <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="executeNoParam">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
      <summary>
              Creates a new parameterless command.
            </summary>
      <param name="executeNoParam">The execution handler.</param>
      <param name="canExecuteNoParam">The execution status handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Action{System.Object})">
      <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="execute">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
      <summary>
              Creates a new command.
            </summary>
      <param name="execute">The execution handler.</param>
      <param name="canExecute">The execution status handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task})">
      <summary>
              Creates a new parameterless asynchronous command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="executeAsyncNoParam">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
      <summary>
              Creates a parameterless new asynchronous command.
            </summary>
      <param name="executeAsyncNoParam">The awaitable execution handler.</param>
      <param name="canExecuteNoParam">The execution status handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task})">
      <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="executeAsync">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Predicate{System.Object})">
      <summary>
              Creates a new asynchronous command.
            </summary>
      <param name="executeAsync">The awaitable execution handler.</param>
      <param name="canExecute">The can execute handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute">
      <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
      <returns>
        <c>true</c> if this command can be executed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute(System.Object)">
      <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
      <param name="parameter">
              Data used by the command. 
            </param>
      <returns>
        <c>true</c> if this command can be executed, otherwise <c>false</c>.</returns>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecuteChanged">
      <summary>
              Raised when RaiseCanExecuteChanged is called.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecuteNoParam">
      <summary>
            The registered parameterless CanExecute delegate.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.Execute">
      <summary>
            Executes the <see cref="T:System.Windows.Input.ICommand" /> on the current command target.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.Execute(System.Object)">
      <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
      <param name="parameter">
              Data used by the command. 
            </param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsync">
      <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsync</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsync(System.Object)">
      <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
      <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsync(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteAsyncNoParam">
      <summary>
            The registered parameterless async execute delegate.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.ExecuteNoParam">
      <summary>
            The registered parameterless synchronous execute delegate.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.DefaultValueInverter">
      <summary>
            Class that inverts a value.
            Supports inversion of <see cref="T:System.Byte" />, <see cref="T:System.Int32" />, <see cref="T:System.Double" />, <see cref="T:System.Decimal" />, <see cref="T:System.Single" />, <see cref="T:System.Boolean" /> and <see cref="T:System.Windows.Visibility" />. <para>This class can be used with the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension" />.</para></summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.DefaultValueInverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.DefaultValueInverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.DefaultValueInverter.InvertValue(System.Object)">
      <summary>
            Throws an exception if operation has failed.
            </summary>
      <param name="value"></param>
      <returns>The inverted value.</returns>
      <exception cref="T:System.InvalidOperationException"></exception>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.DefaultValueInverter.TryInvertValue(System.Object,System.Object@)">
      <summary>
            Trys to invert a value. Won't throw an exception if operation fails.
            </summary>
      <param name="value"></param>
      <param name="invertedValue"></param>
      <returns>
        <c>true</c> when successful, otherwise <c>false</c></returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand">
      <summary>
            Extends <see cref="T:System.Windows.Input.ICommand" /> to allow asynchronous command execution.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.CanExecute">
      <summary>
            Checks if the <see cref="T:System.Windows.Input.ICommand" /> can execute.
            </summary>
      <returns>
        <c>true</c> when the <see cref="T:System.Windows.Input.ICommand" /> can execute, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.Execute">
      <summary>
            Executes the AsyncRelayCommand.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.ExecuteAsync">
      <summary>
            Executes the AsyncRelayCommand asynchronously.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.ExecuteAsync</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.ExecuteAsync(System.Object)">
      <summary>
            Asynchronously executes the AsyncRelayCommand.
            </summary>
      <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.IAsyncRelayCommand.ExecuteAsync(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange">
      <summary>
            Represents a text range, described by a <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange.StartIndex" /> and <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange.EndIndex" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /></summary>
      <param name="startIndex"></param>
      <param name="endIndex"></param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange.EndIndex">
      <summary>
            Holds the end index of the text range.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange.StartIndex">
      <summary>
            Holds the starting index of the text range.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection">
      <summary>
            A collection of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items. Can be used in XAML.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox">
      <summary>
            Attached behavior for <see cref="T:System.Windows.Controls.PasswordBox" /> that will send the <see cref="T:System.Security.SecureString" /> of the <see cref="P:System.Windows.Controls.PasswordBox.SecurePassword" /> property to a command target e.g., view model using a registered <see cref="T:System.Windows.Input.ICommand" /> registered with the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.CommandProperty" /> attached property.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.Command">
      <summary>
            Holds the <see cref="T:System.Windows.Input.ICommand" /> which will be invoked with the <see cref="P:System.Windows.Controls.PasswordBox.SecurePassword" /> of type <see cref="T:System.Security.SecureString" /> as command parameter. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.CommandProperty">
      <summary>
            Holds the <see cref="T:System.Windows.Input.ICommand" /> which will be invoked with the <see cref="P:System.Windows.Controls.PasswordBox.SecurePassword" /> of type <see cref="T:System.Security.SecureString" /> as command parameter. 
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.GetCommand(System.Windows.DependencyObject)">
      <summary>
            The set method of the attached <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox" /> property.
            </summary>
      <param name="attachingElement">The <see cref="T:System.Windows.Controls.PasswordBox" /> element.</param>
      <returns>The <see cref="T:System.Windows.Input.ICommand" /> implementation registered with the <paramref name="attachingElement" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
      <summary>
            The set method of the attached <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.PasswordBox" /> property.
            </summary>
      <param name="attachingElement">The <see cref="T:System.Windows.Controls.PasswordBox" /> element.</param>
      <param name="value">An <see cref="T:System.Windows.Input.ICommand" /> implementation.</param>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup">
      <summary>
            Set of attached behaviors for the <see cref="T:System.Windows.Controls.Primitives.Popup" /> control.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.GetIsSticky(System.Windows.DependencyObject)">
      <summary>
            Get method of the attachecd <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.IsStickyProperty" /> property.
            </summary>
      <param name="attachingElement">The <see cref="T:System.Windows.Controls.Primitives.Popup" /> element.</param>
      <returns>
        <c>true</c> if the behavior is enabled or <c>false</c> if disabled.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.IsSticky">
      <summary>
            When set to <c>true</c>, the <see cref="T:System.Windows.Controls.Primitives.Popup" /> is forced to stick to the current <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />. The <see cref="T:System.Windows.Controls.Primitives.Popup" /> will follow the <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" /> whenever it changes it's screen coordinates.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.IsStickyProperty">
      <summary>
            When set to <c>true</c>, the <see cref="T:System.Windows.Controls.Primitives.Popup" /> is forced to stick to the current <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />. The <see cref="T:System.Windows.Controls.Primitives.Popup" /> will follow the <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" /> whenever it changes it's screen coordinates.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.SetIsSticky(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            The set method of the attached <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.Popup.IsStickyProperty" /> property.
            </summary>
      <param name="attachingElement">The <see cref="T:System.Windows.Controls.Primitives.Popup" /> element.</param>
      <param name="value">
        <c>true</c> to enable the behavior or <c>false</c> to disable it.</param>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl">
      <summary>
            Attached behavior that supports dynamic text highlighting for controls derived from <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.GetHighlightBackground(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightBackgroundProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <returns>The <see cref="T:System.Windows.Media.Brush" /> for the background of the highlight text ranges.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.GetHighlightForeground(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightForegroundProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <returns>The <see cref="T:System.Windows.Media.Brush" /> for the foreground of the highlight text ranges.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.GetHighlightRanges(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <returns>A <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.GetIsHighlightingEnabled(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightForegroundProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <returns>
        <c>true</c> if the the attached <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl" /> behavior is enabled or <c>false</c> if it is disabled.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.GetText(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.TextProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <returns>The current text value.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightBackground">
      <summary>
            Attached property to define the background <see cref="T:System.Windows.Media.Brush" /> for the highlight text, which is defined by <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> attached property. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightBackgroundProperty">
      <summary>
            Attached property to define the background <see cref="T:System.Windows.Media.Brush" /> for the highlight text, which is defined by <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> attached property. 
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightForeground">
      <summary>
            Attached property to define the foreground <see cref="T:System.Windows.Media.Brush" /> for the highlight text, which is defined by <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> attached property. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightForegroundProperty">
      <summary>
            Attached property to define the foreground <see cref="T:System.Windows.Media.Brush" /> for the highlight text, which is defined by <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> attached property. 
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRanges">
      <summary>
            Attached property to define a <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection" /> of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items. cref="HighlightRangesProperty"/&gt; attached property. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty">
      <summary>
            Attached property to define a <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection" /> of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items. cref="HighlightRangesProperty"/&gt; attached property. 
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.IsHighlightingEnabled">
      <summary>
            Attached property to enable or disable the highlight attached behavior <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl" />. cref="HighlightRangesProperty"/&gt; attached property. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.IsHighlightingEnabledProperty">
      <summary>
            Attached property to enable or disable the highlight attached behavior <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl" />. cref="HighlightRangesProperty"/&gt; attached property. 
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.SetHighlightBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>
            Set method of attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightBackgroundProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Brush" /> for the background of the highlight text ranges.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.SetHighlightForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>
            Set method of attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightForegroundProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Brush" /> for the foreground of the highlight text ranges.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.SetHighlightRanges(System.Windows.DependencyObject,BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection)">
      <summary>
            Set method of attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <param name="value">A <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRangeCollection" />.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.SetIsHighlightingEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Set method of attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.IsHighlightingEnabledProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <param name="value">
        <c>true</c> to enable the attached <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl" /> behavior or <c>false</c> to disable it.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.SetText(System.Windows.DependencyObject,System.String)">
      <summary>
            Set method of attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.TextProperty" />.
            </summary>
      <param name="attachingElement">The attaching <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
      <param name="value">The text to display.</param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.Text">
      <summary>
            Attached property to serve as alternative text property for the <see cref="T:System.Windows.Controls.RichTextBox" /> (instead of using <see cref="P:System.Windows.Controls.RichTextBox.Document" />). Optional property to use with <see cref="T:System.Windows.Controls.TextBlock" /> (instead of <see cref="P:System.Windows.Controls.TextBlock.Text" />). The defined <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> collection will always be applied to <see cref="P:System.Windows.Controls.TextBlock.Text" /> and the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.TextProperty" /> values. 
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.TextProperty">
      <summary>
            Attached property to serve as alternative text property for the <see cref="T:System.Windows.Controls.RichTextBox" /> (instead of using <see cref="P:System.Windows.Controls.RichTextBox.Document" />). Optional property to use with <see cref="T:System.Windows.Controls.TextBlock" /> (instead of <see cref="P:System.Windows.Controls.TextBlock.Text" />). The defined <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.HighlightRange" /> items contained in the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.HighlightRangesProperty" /> collection will always be applied to <see cref="P:System.Windows.Controls.TextBlock.Text" /> and the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.AttachedBehaviors.TextControl.TextProperty" /> values. 
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1">
      <summary>
            Raises <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event when the property of an item raised <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />. The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> for this particular notification is <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> with a reference to the notifying item and the item's index. .
            </summary>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter">
      <summary>
            An <see cref="T:System.Windows.Data.IMultiValueConverter" /> implementation that checks if all values are <c>true</c>. Supports <see cref="F:System.Windows.Data.BindingMode.OneWay" /> or <see cref="F:System.Windows.Data.BindingMode.OneTime" /> only.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.</summary>
      <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.If the method returns <see langword="null" />, the valid <see langword="null" /> value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Not supported.
            </summary>
      <param name="value"></param>
      <param name="targetTypes"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BooleanMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.NotSupportedException">Back conversion is not supported.</exception>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter">
      <summary>
            Implementation of <see cref="T:System.Windows.Data.IValueConverter" /> that converts a <see cref="T:System.Boolean" /> to a custom string representation e.g., convert <c>true</c> to <c>"Enabled"</c>.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.FalseValue">
      <summary>
            The value to show in case the converter input evaluates to <c>false</c>.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.FalseValueProperty">
      <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> of the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.FalseValue" /> property.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.NullValue">
      <summary>
            The value to show in case the converter input evaluates to <c>true</c>.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.NullValueProperty">
      <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> of the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.NullValue" /> property.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.TrueValue">
      <summary>
            The value to show in case the converter input evaluates to <c>true</c>.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.TrueValueProperty">
      <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> of the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.BoolToStringConverter.TrueValue" /> property.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.DividerValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter">
      <summary>
              Converter to truncate file paths exceeding a specific length by replacing a number of characters with an ellipsis.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.MaxLength">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.MaxLength</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.MaxLengthProperty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:BionicCode.Utilities.Net.Framework.Wpf.Converter.FilePathTruncateConverter.MaxLengthProperty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertBooleanConverter">
      <summary>
            Implementation of <see cref="T:System.Windows.Data.IValueConverter" /> that inverts a bool value.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertBooleanConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertBooleanConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertValueConverter">
      <summary>
            Implementation of <see cref="T:System.Windows.Data.IValueConverter" /> that inverts <see cref="T:System.Boolean" />, <see cref="T:System.Windows.Visibility" />, <see cref="T:System.Int32" />, <see cref="T:System.Double" />, <see cref="T:System.Decimal" /> and <see cref="T:System.Single" /></summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.InvertValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a value. </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Comparer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Comparer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ComparerProperty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ComparerProperty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.CompareValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.CompareValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.CompareValueProperty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.CompareValueProperty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="parameter">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parameter</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="culture">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>culture</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Converter.IsGreaterThanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog">
      <summary>
            Attached behavior. Displays a <see cref="T:System.Windows.Window" /> based on an implementation of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> assigned to the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContextProperty" /> and a custom <see cref="T:System.Windows.DataTemplate" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DataTemplateSelector">
      <summary>
            Attached property to set a <see cref="T:System.Windows.Controls.DataTemplateSelector" /> to use for the displayed dialog <see cref="T:System.Windows.Window" /> to display the content.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DataTemplateSelectorProperty">
      <summary>
            Attached property to set a <see cref="T:System.Windows.Controls.DataTemplateSelector" /> to use for the displayed dialog <see cref="T:System.Windows.Window" /> to display the content.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContext">
      <summary>
            Attached property designed to bind to a view model property of type <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />. A change of this property will trigger the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog" /> to show a <see cref="T:System.Windows.Window" /> with the <see cref="P:System.Windows.FrameworkElement.DataContext" /> set to the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> instance of this property.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContextProperty">
      <summary>
            Attached property designed to bind to a view model property of type <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />. A change of this property will trigger the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog" /> to show a <see cref="T:System.Windows.Window" /> with the <see cref="P:System.Windows.FrameworkElement.DataContext" /> set to the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> instance of this property.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.GetDataTemplateSelector(System.Windows.DependencyObject)">
      <summary>
            Returns the <see cref="T:System.Windows.Controls.DataTemplateSelector" /> registered with the <paramref name="attachingElement" />.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <returns>The <see cref="T:System.Windows.Controls.DataTemplateSelector" /> registered with the <paramref name="attachingElement" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.GetDialogDataContext(System.Windows.DependencyObject)">
      <summary>
            The getter for the attached <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContextProperty" /> property.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <returns>The current associated <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.GetIsClosable(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsClosableProperty" />.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <returns>
        <c>true</c> to allow the user to close the <see cref="T:System.Windows.Window" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.GetIsModal(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsModalProperty" />.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <returns>
        <c>true</c> to show the <see cref="T:System.Windows.Window" /> modal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.GetStyle(System.Windows.DependencyObject)">
      <summary>
            Get method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.StyleProperty" />.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <returns>The dialog's <see cref="T:System.Windows.Style" /> registered with the <paramref name="attachingElement" />.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsClosable">
      <summary>
            Attached property that controls if the user is allowed to explicitly close the <see cref="T:System.Windows.Window" />.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsClosableProperty">
      <summary>
            Attached property that controls if the user is allowed to explicitly close the <see cref="T:System.Windows.Window" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsModal">
      <summary>
            Attached property that controls if the <see cref="T:System.Windows.Window" /> is shown modal.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsModalProperty">
      <summary>
            Attached property that controls if the <see cref="T:System.Windows.Window" /> is shown modal.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.SetDataTemplateSelector(System.Windows.DependencyObject,System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Set method of the attached <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DataTemplateSelectorProperty" /> property.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <param name="value">A <see cref="T:System.Windows.Controls.DataTemplateSelector" /> implementation for the window's content.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.SetDialogDataContext(System.Windows.DependencyObject,BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel)">
      <summary>
            The setter for the attached <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContextProperty" /> property.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <param name="value">An instance of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.SetIsClosable(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Set method of the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsClosableProperty" /> attached property.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <param name="value">
        <c>true</c> to allow the user to close the <see cref="T:System.Windows.Window" />, otherwise <c>false</c>. The default is <c>false</c>.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.SetIsModal(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Set method of the <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.IsModalProperty" /> attached property.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <param name="value">
        <c>true</c> to show the <see cref="T:System.Windows.Window" /> modal, otherwise <c>false</c>. The default is <c>false</c>.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.SetStyle(System.Windows.DependencyObject,System.Windows.Style)">
      <summary>
            Set method of the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.StyleProperty" />.
            </summary>
      <param name="attachingElement">The attached <see cref="T:System.Windows.FrameworkElement" />.</param>
      <param name="value">The <see cref="T:System.Windows.Style" /> for the dialog <see cref="T:System.Windows.Window" />.</param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.Style">
      <summary>
            The attached Style property which holds the <see cref="T:System.Windows.Style" /> which should apply to the dialog. <see cref="P:System.Windows.Style.TargetType" /> must be <see cref="T:System.Windows.Window" />.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.StyleProperty">
      <summary>
            The attached Style property which holds the <see cref="T:System.Windows.Style" /> which should apply to the dialog. <see cref="P:System.Windows.Style.TargetType" /> must be <see cref="T:System.Windows.Window" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.TryGetDialog(BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel,System.Windows.Window@)">
      <summary>
            Attempts to get the dialog <see cref="T:System.Windows.Window" /> of the associated <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> instance.
            </summary>
      <param name="viewModel">The associated data context of the dialog.</param>
      <param name="dialog">The <see cref="T:System.Windows.Window" /> instance associated with the <paramref name="viewModel" />.</param>
      <returns>
        <c>true</c> when a <see cref="T:System.Windows.Window" /> that maps to the <paramref name="viewModel" /> exists, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult">
      <summary>
            An enumeration to represent the dialog' status after it was closed.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult.None">
      <summary>
            Undefined
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult.Accepted">
      <summary>
            Accepted e.g., "OK" button was clicked.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult.Denied">
      <summary>
            Denied e.g. "No" button was clicked
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult.Aborted">
      <summary>
            Aborted e.g., "Cancel" button was clicked
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel">
      <summary>
            Implementation of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />. This abstract class implements the dialog data handling logic and is therefore preferred over a custom implementation of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.#ctor(System.String,System.String)">
      <summary>
            Creates a nw instance of the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel" /> using a do-nothing dialog closed callback.
            </summary>
      <param name="message">The dialog message to sow.</param>
      <param name="title">The dialog caption to appear in the title bar of the Window.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.#ctor(System.String,System.String,System.Func{BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel,System.Threading.Tasks.Task})">
      <summary>
            Creates a nw instance of the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel" /> registering a dialog closed callback.
            </summary>
      <param name="message">The dialog message to sow.</param>
      <param name="title">The dialog caption to appear in the title bar of the Window.</param>
      <param name="sendResponseCallbackAsync">The call back to invoke when the dialog was closed</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.#ctor(System.String,System.String,System.Windows.Media.ImageSource,System.Func{BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel,System.Threading.Tasks.Task})">
      <summary>
            Creates a nw instance of the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel" /> registering a dialog closed callback.
            </summary>
      <param name="message">The dialog message to sow.</param>
      <param name="title">The dialog caption to appear in the title bar of the Window.</param>
      <param name="titleBarIcon">The <see cref="T:System.Windows.Media.ImageSource" /> for the window's title icon.</param>
      <param name="sendResponseCallbackAsync">The call back to invoke when the dialog was closed</param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.DialogResult">
      <summary>
            The <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult" /> of the user interaction.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.ExecuteSendResponseCommandAsync(BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult)">
      <summary>
            Asynchronously called when the SendResponseAsyncCommand is executed.
            </summary>
      <param name="result">A <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogResult" /> value that was received by the ICommand.</param>
      <returns>A <c>Task</c> instance to make this method awaitable.</returns>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.InteractionCompleted">
      <summary>
            Event to signal that the interaction with the dialog is completed.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.IsClosable">
      <summary>
            Controls whether the user is allowed to close the dialog Window.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.Message">
      <summary>
            The message for the dialog to show to the user.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.OnInteractionCompleted">
      <summary>
            Event invocator of the <see cref="E:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.InteractionCompleted" /> event. Raising this event will request the dialog to be closed.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.ResponseCallbackAsync">
      <summary>
            The asynchronous callback that is invoked during the dialog interaction. Use this callback as continuation of the interrupted flow, after the required data was collected by the dialog.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.SendResponseAsyncCommand">
      <summary>
            ICommand that can be bound to the buttons of the dialog. The command parameter is a <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.Title">
      <summary>
            The title of the dialog <c>Window</c></summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel.TitleBarIcon">
      <summary>
            The icon to display in the title bar of the Window
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel">
      <summary>
            The DataContext and binding source for the dialog Window. Implement this interface or the derived abstract <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.DialogViewModel" /> to transport data from the view to the view model via binding. The <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> will be the content of the dialog window. This means the corresponding DataTemplate can define e.g. an input form that can bind to the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />. Register a callback with the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync" /> property to process the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult" /> and the data of the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult">
      <summary>
            The <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult" /> of the user interaction.
            </summary>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.InteractionCompleted">
      <summary>
            Event to signal that the interaction with the dialog is completed.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.IsClosable">
      <summary>
            Controls whether the user is allowed to close the dialog Window.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.Message">
      <summary>
            The message for the dialog to show to the user.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync">
      <summary>
            The asynchronous callback that is invoked during the dialog interaction. Use this callback as continuation of the interrupted flow, after the required data was collected by the dialog.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.SendResponseAsyncCommand">
      <summary>
            ICommand that can be bound to the buttons of the dialog. The command parameter is a <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.DialogResult" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.Title">
      <summary>
            The title of the dialog <c>Window</c></summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel.TitleBarIcon">
      <summary>
            The icon to display in the title bar of the Window
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModelProvider">
      <summary>
            The binding source for the current dialog view and the attached property <see cref="F:BionicCode.Utilities.Net.Framework.Wpf.Dialog.Dialog.DialogDataContextProperty" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModelProvider.DialogViewModel">
      <summary>
            The binding source for the current dialog view.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModelProviderSource">
      <summary>
            Interface that supports notification of observers to request display of a dialog.
            The event args is the view model of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> which serves as the DataContext and binding source of the dialog.
            </summary>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModelProviderSource.DialogRequested">
      <summary>
            Event that can be raised to notify a listening view model (or view) that the displaying of dialog is requested. The event args is the view model of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Dialog.IDialogViewModel" /> which serves as the DataContext and binding source of the dialog.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions">
      <summary>
            Collection of extension methods e.g. visual tree traversal
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.EnumerateVisualChildElements``1(System.Windows.DependencyObject)">
      <summary>
            Traverses the visual tree towards the leafs until all elements with a matching element type is found.
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to enable deferred traversal.
            </summary>
      <param name="parent">The current extended <see cref="T:System.Windows.DependencyObject" />.</param>
      <typeparam name="TChildren">The type the visual children must match.</typeparam>
      <returns>An enumerable collection of matching visual child elements.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.FindVisualChildElements``1(System.Windows.DependencyObject)">
      <summary>
            Traverses the visual tree towards the leafs until all elements with a matching element type is found.
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to enable deferred traversal.
            </summary>
      <param name="parent">The current extended <see cref="T:System.Windows.DependencyObject" />.</param>
      <typeparam name="TChildren">The type the visual children must match.</typeparam>
      <returns>An enumerable collection of matching visual child elements.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.ToDictionary(System.Object)">
      <summary>
            Coverts any type to a <see cref="T:System.Collections.Generic.Dictionary`2" />, where the <c>TKey</c> is the member name and <c>TValue</c> the member's value.
            </summary>
      <param name="instanceToConvert"></param>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" />, where the <c>TKey</c> is the member name of type <see cref="T:System.String" /> and <c>TValue</c> the member's value of type <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualChildElement``1(System.Windows.DependencyObject,``0@)">
      <summary>
            Traverses the visual tree towards the leafs until an element with a matching element type is found.
            </summary>
      <param name="parent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parent</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualChildElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </param>
      <param name="resultElement">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resultElement</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualChildElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TChild">The type the visual child must match.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualChildElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualChildElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)">
      <summary>
            Traverses the visual tree towards the leafs until an element with a matching element name is found.
            </summary>
      <param name="parent"></param>
      <param name="childElementName">The name the visual child's name must match.</param>
      <param name="resultElement">The found element or <c>null</c> if no matching element was found.</param>
      <returns>
        <c>true</c> when an element with the specified <paramref name="childElementName" /> was found, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElement``1(System.Windows.DependencyObject,``0@)">
      <summary>
            Traverses the visual tree towards the root until an element with a matching element name is found.
            </summary>
      <param name="child">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>child</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </param>
      <param name="resultElement">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resultElement</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TParent">The type the visual parent must match.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElement``1(System.Windows.DependencyObject,``0@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)">
      <summary>
            Traverses the visual tree towards the root until an element with a matching element type is found.
            </summary>
      <param name="child">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>child</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)</parameter>
          </include>
        </markup>
      </param>
      <param name="elementName">The element name the visual parent must match.</param>
      <param name="resultElement">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resultElement</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Extensions.HelperExtensions.TryFindVisualParentElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1">
      <summary>
            A reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand" /> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.Execute(`0)" />, <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.ExecuteAsync(`0)" /> and <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)" /> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" /></summary>
      <typeparam name="TParam">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TParam</parameter>
            <parameter>T:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action)">
      <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="executeNoParam">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action,System.Func{System.Boolean})">
      <summary>
              Creates a new parameterless command.
            </summary>
      <param name="executeNoParam">The execution handler.</param>
      <param name="canExecuteNoParam">The execution status handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0})">
      <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)" /> always returns <code>true</code>).
            </summary>
      <param name="execute">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
      <summary>
              Creates a new command.
            </summary>
      <param name="execute">The execution handler.</param>
      <param name="canExecute">The CanExecute handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task})">
      <summary>
              Creates a new parameterless asynchronous command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.AsyncRelayCommand.CanExecute" /> will always return <c>true</c>).
            </summary>
      <param name="executeAsyncNoParam">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
      <summary>
              Creates a parameterless new asynchronous command.
            </summary>
      <param name="executeAsyncNoParam">The awaitable execution handler.</param>
      <param name="canExecuteNoParam">The execution status handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>
              Creates a new asynchronous command that can always execute (<see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)" /> always returns <code>true</code>).
            </summary>
      <param name="executeAsync">The awaitable execution handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0})">
      <summary>
              Creates a new asynchronous command.
            </summary>
      <param name="executeAsync">The awaitable execution handler.</param>
      <param name="canExecute">The can execute handler.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)">
      <summary>
            Checks if the <see cref="T:System.Windows.Input.ICommand" /> can execute.
            </summary>
      <param name="parameter">The command parameter.</param>
      <returns>
        <c>true</c> when the <see cref="T:System.Windows.Input.ICommand" /> can execute, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.Execute(`0)">
      <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
      <param name="parameter">
            The command parameter.
            </param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.ExecuteAsync(`0)">
      <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
      <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Generic.AsyncRelayCommand`1.ExecuteAsync(`0)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1">
      <summary>
            Extends <see cref="T:System.Windows.Input.ICommand" /> to allow asynchronous command execution, where the accepted parameter of the <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1.Execute(`0)" /> and <see cref="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1.CanExecute(`0)" /> is strongly typed to eliminate type casting inside the registered callbacks.
            </summary>
      <typeparam name="TParam">The type of the <see cref="P:System.Windows.Input.ICommandSource.CommandParameter" />.</typeparam>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1.CanExecute(`0)">
      <summary>
            Checks if the <see cref="T:System.Windows.Input.ICommand" /> can execute.
            </summary>
      <param name="parameter">The command parameter.</param>
      <returns>
        <c>true</c> when the <see cref="T:System.Windows.Input.ICommand" /> can execute, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1.Execute(`0)">
      <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
      <param name="parameter">
            The command parameter.
            </param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Generic.IAsyncRelayCommand`1.ExecuteAsync(`0)">
      <summary>
            Asynchronously executes the AsyncRelayCommand on the current command target.
            </summary>
      <param name="parameter">
            The command parameter.
            </param>
      <returns>An awaitable <see cref="T:System.Threading.Tasks.Task" /> instance.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension">
      <summary>
            XAML extension to return the values of an enumeration.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension.#ctor(System.Type)">
      <summary>
            Constructor to initialize the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension.EnumType" /> property.
            </summary>
      <param name="enumType"></param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension.EnumType">
      <summary>
            The enum to enumerate.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EnumExtension.ProvideValue(System.IServiceProvider)">
      <summary>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</summary>
      <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
      <returns>The object value to set on the property where the extension is applied.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension">
      <summary>
            XAML Equality comparer.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueX">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueX</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Object)</parameter>
          </include>
        </markup>
      </param>
      <param name="valueY">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueY</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Type)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueXToCompare">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueXToCompare</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Type)</parameter>
          </include>
        </markup>
      </param>
      <param name="expectedType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expectedType</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.#ctor(System.Object,System.Type)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.ProvideValue(System.IServiceProvider)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.ProvideValue(System.IServiceProvider)</parameter>
          </include>
        </markup>
      </summary>
      <param name="serviceProvider">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>serviceProvider</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.ProvideValue(System.IServiceProvider)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Markup.EqualsExtension.ProvideValue(System.IServiceProvider)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode">
      <summary>
            Enumeration to set the inversion direction of the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension" />.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode.Default">
      <summary>
            Default/Unset value
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode.OneWay">
      <summary>
            Only invert value from binding source to target.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode.OneWayToSource">
      <summary>
            Only invert from binding target to source.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode.TwoWay">
      <summary>
            Invert bi-directional.
            </summary>
    </member>
    <member name="F:BionicCode.Utilities.Net.Framework.Wpf.Markup.InversionMode.OneTime">
      <summary>
            Only invert on initialization (from source to target).
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension">
      <summary>
            XAML extension to invert the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.Value" /> property using the current <see cref="T:BionicCode.Utilities.Net.Standard.IValueInverter" />. Supports every <see cref="T:System.Windows.Markup.MarkupExtension" /> e.g., <see cref="T:System.Windows.Data.BindingBase" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.#ctor(System.Object)">
      <summary>
            Constructor.
            </summary>
      <param name="value">Any value that can be converted by the provided <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.ValueInverter" />. Can be any <see cref="T:System.Windows.Markup.MarkupExtension" /> like <see cref="T:System.Windows.Data.BindingBase" /> that can provide a valid value.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.GetValueToInvertFromMarkupExtension(System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>
            Extracts the value from a <see cref="T:System.Windows.Markup.MarkupExtension" />.
            </summary>
      <param name="wrappedMarkupExtension">The <see cref="T:System.Windows.Markup.MarkupExtension" /> to extract the value form.</param>
      <param name="serviceProvider">The instance of the <see cref="T:System.IServiceProvider" /> which was passed to the <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> override.</param>
      <returns>The value of <paramref name="wrappedMarkupExtension" />.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.Mode">
      <summary>
            The inversion mode.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.ProvideValue(System.IServiceProvider)">
      <summary>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</summary>
      <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
      <returns>The object value to set on the property where the extension is applied.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.Value">
      <summary>
            The Value to invert. Can everything that the provided <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.ValueInverter" /> can invert. The value can also be a <see cref="T:System.Windows.Data.BindingBase" /> or any other <see cref="T:System.Windows.Markup.MarkupExtension" /> that can provide the invertible value.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.InvertExtension.ValueInverter">
      <summary>
            The implementation of <see cref="T:BionicCode.Utilities.Net.Standard.IValueInverter" />.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension">
      <summary>
            XAML markup extension that allows to define primitive type values like <see cref="T:System.Boolean" /> or <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.#ctor">
      <summary>
            Initializes a new instance of <seealso cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of <seealso cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension" />.
            </summary>
      <param name="booleanValue">The value of type <see cref="T:System.Boolean" />.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.#ctor(System.Double)">
      <summary>
            Initializes a new instance of <seealso cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension" />.
            </summary>
      <param name="doubleValue">The value of type <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of <seealso cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension" />.
            </summary>
      <param name="int32Value">The value of type <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.#ctor(System.String)">
      <summary>
            Initializes a new instance of <seealso cref="T:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension" />.
            </summary>
      <param name="stringValue">The value of type <see cref="T:System.String" />.</param>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.Boolean">
      <summary>
            Holds a <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.Double">
      <summary>
            Holds a <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.Int32">
      <summary>
            Holds a <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.ProvideValue(System.IServiceProvider)">
      <summary>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</summary>
      <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
      <returns>The object value to set on the property where the extension is applied.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Markup.PrimitiveExtension.String">
      <summary>
            Holds a <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector">
      <summary>
            Exposes a basic static API to access the AppSettings file in order to manage application settings. 
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.TryReadBool(System.String,System.Boolean@)">
      <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
      <param name="key">The key that maps to a specific setting.</param>
      <param name="value">The actual settings <see cref="T:System.Boolean" /> value of the specified key.</param>
      <returns>
        <c>true</c> when an entry for the specified <paramref name="key" /> was found. Otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.TryReadDouble(System.String,System.Double@)">
      <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
      <param name="key">The key that maps to a specific setting.</param>
      <param name="value">The actual settings <see cref="T:System.Double" /> value of the specified key.</param>
      <returns>
        <c>true</c> when an entry for the specified <paramref name="key" /> was found. Otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.TryReadInt(System.String,System.Int32@)">
      <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
      <param name="key">The key that maps to a specific setting.</param>
      <param name="value">The actual settings <see cref="T:System.Int32" /> value of the specified key.</param>
      <returns>
        <c>true</c> when an entry for the specified <paramref name="key" /> was found. Otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.TryReadString(System.String,System.String@)">
      <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
      <param name="key">The key that maps to a specific setting.</param>
      <param name="value">The actual settings <see cref="T:System.String" /> value of the specified key.</param>
      <returns>
        <c>true</c> when an entry for the specified <paramref name="key" /> was found. Otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.WriteBool(System.String,System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value to the settings file which is stored using the specified lookup <paramref name="key" />. If the <paramref name="key" /> already exists, the existing value will be overwritten.
            </summary>
      <param name="key">The lookup key for the <paramref name="value" />.</param>
      <param name="value">The settings value to save to the file.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.WriteDouble(System.String,System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value to the settings file which is stored using the specified lookup <paramref name="key" />. If the <paramref name="key" /> already exists, the existing value will be overwritten.
            </summary>
      <param name="key">The lookup key for the <paramref name="value" />.</param>
      <param name="value">The settings value to save to the file.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.WriteInt(System.String,System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value to the settings file which is stored using the specified lookup <paramref name="key" />. If the <paramref name="key" /> already exists, the existing value will be overwritten.
            </summary>
      <param name="key">The lookup key for the <paramref name="value" />.</param>
      <param name="value">The settings value to save to the file.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.AppSettingsConnector.WriteString(System.String,System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value to the settings file which is stored using the specified lookup <paramref name="key" />. If the <paramref name="key" /> already exists, the existing value will be overwritten.
            </summary>
      <param name="key">The lookup key for the <paramref name="value" />.</param>
      <param name="value">The settings value to save to the file.</param>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager">
      <summary>
            Interface that describes an API that manages a MRU (Most Recently Used files) table which is stored in the AppSettings file.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.AddMostRecentlyUsedFile(System.String)">
      <summary>
            Adds a file with the specified path to the MRU table.
            </summary>
      <param name="filePath">The path to the file which is to add to the MRU table.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.Clear">
      <summary>
            Clears the MRU list.
            </summary>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.FileAdded">
      <summary>
            Raised when a new file was added to the MRU list. The event args contains the old and the new MostRecentlyUsedFileItem. <br />Once the max <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> limit is reached, the least used file will be removed from the list to make space for the new item. <br />In this case the <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue" /> is the removed oldest item in the list. <br />Otherwise <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue" /> will be <c>null</c>.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.MaxMostRecentlyUsedCount">
      <summary>
            The maximum number of files that are kept in the MRU table.<br />The default value is 10.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.MostRecentlyUsedFile">
      <summary>
            Gets the MRU file which is the last file added to the MRU table.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.IMruManager.MostRecentlyUsedFiles">
      <summary>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> collection of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> which contains the MRU files.
            </summary>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem">
      <summary>
            An immutable item that represents a Most Recently Used file (MRU) table entry.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.#ctor(System.IO.FileInfo)">
      <summary>
            Constructor
            </summary>
      <param name="fileInfo">The underlying <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo" /> of the item.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.Equals(BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo">
      <summary>
            Return the underlying <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo" /> of this instance.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.FullName">
      <summary>
            Returns the full file path of the file.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.Name">
      <summary>
            Returns the file name including the extension.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.op_Equality(BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem,BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem)">
      <summary>
            Is equal operator.
            </summary>
      <param name="left">Left argument.</param>
      <param name="right">Right argument.</param>
      <returns>
        <c>true</c> when both arguments are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem.op_Inequality(BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem,BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem)">
      <summary>
            Is not equal operator.
            </summary>
      <param name="left">Left argument.</param>
      <param name="right">Right argument.</param>
      <returns>
        <c>true</c> when both arguments are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager">
      <summary>
            API that manages a MRU (Most Recently Used files) table which is stored in the AppSettings file.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.AddMostRecentlyUsedFile(System.String)">
      <summary>
            Adds a file with the specified path to the MRU table.
            </summary>
      <param name="filePath">The path to the file which is to add to the MRU table.</param>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.Clear">
      <summary>
            Clears the MRU list.
            </summary>
    </member>
    <member name="E:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.FileAdded">
      <summary>
            Raised when a new file was added to the MRU list. The event args contains the old and the new MostRecentlyUsedFileItem. <br />Once the max <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> limit is reached, the least used file will be removed from the list to make space for the new item. <br />In this case the <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue" /> is the removed oldest item in the list. <br />Otherwise <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue" /> will be <c>null</c>.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.InternalMostRecentlyUsedFiles">
      <summary>
            The underlying collection that holds the <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> elements.<br /> This collection is the source for the public <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MostRecentlyUsedFiles" /> property, which is a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.IsMruCountValid(System.Int32)">
      <summary>
            Property validation delegate. Validates the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount" /> property values.
            </summary>
      <param name="count">The max count value for <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount" /> to validate.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.IsMruCountValid(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount">
      <summary>
            The maximum number of files that are kept in the MRU table.<br />The default value is 10.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MostRecentlyUsedFile">
      <summary>
            Gets the MRU file which is the last file added to the MRU table.
            </summary>
    </member>
    <member name="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.MostRecentlyUsedFiles">
      <summary>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> collection of <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> which contains the MRU files.
            </summary>
    </member>
    <member name="M:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.OnFileAdded(BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem,BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem)">
      <summary>
            Called when the <see cref="P:BionicCode.Utilities.Net.Framework.Wpf.Settings.MruManager.InternalMostRecentlyUsedFiles" /> has changed.
            </summary>
      <param name="oldItem">The removed <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> item.</param>
      <param name="newItem">The newly added <see cref="T:BionicCode.Utilities.Net.Framework.Wpf.Settings.MostRecentlyUsedFileItem" /> item.</param>
    </member>
  </members>
</doc>
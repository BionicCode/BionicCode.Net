<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BionicCode.Utilities.Net.Core.Wpf</name>
    </assembly>
    <members>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand">
            <summary>
            A  reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand"/> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.Execute"/>, <see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.ExecuteAsync"/> and <see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute"/> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" />
            </summary>
            <remarks><c>AsyncRelayCommand</c> implements <see cref="T:System.Windows.Input.ICommand" /></remarks>
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecuteChanged">
            <summary>
              Raised when RaiseCanExecuteChanged is called.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Action{System.Object})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="execute">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Action)">
            <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="executeNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task})" -->
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless command.
            </summary>
            <param name="executeNoParam">The execution handler.</param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
              Creates a new command.
            </summary>
            <param name="execute">The execution handler.</param>
            <param name="canExecute">The execution status handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
              Creates a parameterless new asynchronous command.
            </summary>
            <param name="executeAsyncNoParam">The awaitable execution handler.</param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Predicate{System.Object})">
            <summary>
              Creates a new asynchronous command.
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute">
            <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
            <returns><code>true</code>code> if this command can be executed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.Execute">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.ExecuteAsync">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.CanExecute(System.Object)">
            <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <returns><code>true</code>code> if this command can be executed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.Execute(System.Object)">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.AsyncRelayCommand.ExecuteAsync(System.Object)">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1">
            <summary>
            Raises <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event when the property of an item raised <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>. The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> for this particular notification is <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> with a reference to the notifying item and the item's index. .
            </summary>
            <typeparam name="TItem"></typeparam>
            <remarks>The item must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> otherwise the behavior is like a common <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1"/> implements the weak event pattern in order to handle the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Collections.Generic.ObservablePropertyChangedCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Converter.FilePathTruncateConverter">
            <summary>
              Converter to truncate file paths exceeding a specific length by replacing a number of characters with an ellipsis.
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.DefaultValueInverter">
            <summary>
            Class that inverts a value.
            Supports inversion of <see cref="T:System.Byte"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/>, <see cref="T:System.Boolean"/> and <see cref="T:System.Windows.Visibility"/>. <para>This class can be used with the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension"/>.</para>
            </summary>
            <remarks>The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.DefaultValueInverter"/> will check if the value is of type string. The string representation is then converted to the native type, inverted and then converted back to string using the provided <see cref="M:System.Object.ToString"/> implementation provided by the native type.</remarks>
            <seealso cref="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension"/>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.DefaultValueInverter.InvertValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.DefaultValueInverter.TryInvertValue(System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog">
            <summary>
            Attached behavior. Displays a <see cref="T:System.Windows.Window"/> based on an implementation of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> assigned to the attached property <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> and a custom <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
            <remarks>
            This attached behavior will display a dialog <see cref="T:System.Windows.Window"/> using the View-model-first pattern.
            <para>The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> instance bound to the <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> will be assigned to the <see cref="P:System.Windows.Controls.ContentControl.Content"/> of the <see cref="T:System.Windows.Window"/>. To layout the content requires to define an implicit <see cref="T:System.Windows.DataTemplate"/> that targets the type of the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation. Alternatively set the template for the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate"/> via a <see cref="T:System.Windows.Style"/> that targets <see cref="T:System.Windows.Window"/> and is assigned to the <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.StyleProperty"/> attached property. For more complex scenarios it is possible to assign a <see cref="T:System.Windows.Controls.DataTemplateSelector"/> to the <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DataTemplateSelectorProperty"/> attached property.</para>
            
            <para>
            To define the attributes like title and icon of the dialog, set the corresponding values of the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation. <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog"/> sets up a data binding to those properties, so that they can be dynamically changed by the view model.
            </para>
            <para>
            It is recommended to use and extend the abstract <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/>, which provides the basic <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation and logic. It only needs to be extended to provide the required specific properties for the dialog's context.
            </para>
            
            <para>
            To show a dialog, simply assign an instance of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> to the attached property <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/>. A change of that property will automatically display a new dialog window. To each <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> maps an instance of <see cref="T:System.Windows.Window"/>. It is recommended to bind the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> to a property of a view model class that implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. This way it is very simple to display dialogs dynamically initiated by the view model i.e. the binding source of the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> property.
            </para>
            
            <para>
            To close a dialog, raise the <see cref="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.InteractionCompleted"/> event from the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation e.g., by calling <see cref="M:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.OnInteractionCompleted"/> or by invoking the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.SendResponseAsyncCommand"/> (in case you followed the recommendation to extend <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/>).
            </para>
            </remarks>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty">
            <summary>
            Attached property designed to bind to a view model property of type <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>. A change of this property will trigger the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog"/> to show a <see cref="T:System.Windows.Window"/> with the <see cref="P:System.Windows.FrameworkElement.DataContext"/> set to the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> instance of this property.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.SetDialogDataContext(System.Windows.DependencyObject,BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel)">
            <summary>
            The setter for the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> property.
            </summary>
            <param name="attachingElement">A <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <param name="value">An instance of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.GetDialogDataContext(System.Windows.DependencyObject)">
            <summary>
            The getter for the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> property.
            </summary>
            <param name="attachingElement">A <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <returns>The current associated <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>.</returns>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.StyleProperty">
            <summary>
            The attached Style property which holds the <see cref="T:System.Windows.Style"/> which should apply to the dialog. <see cref="P:System.Windows.Style.TargetType"/> must be <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel">
            <summary>
            Implementation of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>. This abstract class implements the dialog data handling logic and is therefore preferred over a custom implementation of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>.
            </summary>
            <remarks>It is recommended to use the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog"/> attached behavior as it handles the view logic. Just bind <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> to an instance of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> (or <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>) and define a DataTemplate for each implementation of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/>.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.OnSendResponseAsyncCommandExecuted(BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogResult)">
            <summary>
            Asynchronously called when the SendResponseAsyncCommand is executed.
            </summary>
            <param name="result">A <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogResult"/> value that was received by the ICommand.</param>
            <returns>A <c>Task</c> instance to make this method awaitable.</returns>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.Title">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.Message">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.TitleBarIcon">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.SendResponseAsyncCommand">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.DialogResult">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.ResponseCallbackAsync">
            <inheritdoc />
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel.InteractionCompleted">
            <inheritdoc />
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel">
            <summary>
            The DataContext and binding source for the dialog Window. Implement this interface or the derived abstract <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> to transport data from the view to the view model via binding.
            </summary>
            <remarks>It is recommended to extend the abstract class <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> instead as this class already implemented the dialog data handling logic. Also use the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog"/> attached behavior as it handles the view logic. Just bind <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> to an instance of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> (or <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>) and define a DataTemplate for each implementation of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/>.</remarks>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.Title">
            <summary>
            The title of the dialog <c>Window</c>
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.Message">
            <summary>
            The message for the dialog to show to the user.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.DialogResult">
            <summary>
            The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogResult"/> of the user interaction.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync">
            <summary>
            The asynchronous callback that is invoked during the dialog interaction. Use this callback as continuation of the interrupted flow, after the required data was collected by the dialog.
            </summary>
            <remarks>When using the abstract class <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> this delegate is invoked when invoking the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.SendResponseAsyncCommand"/>. The parameter of this callback is the original <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>. The <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync"/> makes the dialog interaction fire-and-forget as the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource"/> doesn't need to wait for the  dialog to close and doesn't have to store a reference to the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>.</remarks>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.SendResponseAsyncCommand">
            <summary>
            ICommand that can be bound to the buttons of the dialog. The command parameter is a <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogResult"/>.
            </summary>
            <remarks>When using the abstract class <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.SendResponseAsyncCommand"/> sets the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.DialogResult"/> property and invokes the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync"/> continuation callback. The parameter of this callback is the original <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>. The <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.ResponseCallbackAsync"/> makes the dialog interaction fire-and-forget as the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource"/> doesn't need to wait for the  dialog to close and doesn't have to store a reference to the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/>.</remarks>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.TitleBarIcon">
            <summary>
            The icon to display in the title bar of the Window
            </summary>
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel.InteractionCompleted">
            <summary>
            Event to signal that the interaction with the dialog is completed.
            </summary>
            <remarks>When extending the abstract class <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.DialogViewModel"/> (instead of the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> interface) together with the attached property <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> raising this event will notify the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog"/> attached behavior class to close the Window.</remarks>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProvider">
            <summary>
            The binding source for the current dialog view and the attached property <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/>.
            </summary>
            <remarks>The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> can be received from instances that implement <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource"/> by subscribing to their <see cref="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource.DialogRequested"/> event.
            When used together with the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> the setting of the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProvider.DialogViewModel"/> property automatically triggers the showing of a dialog. The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> is rendered by a custom defined <see cref="!:DataTemplate"/> that targets the concrete type of a <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation.</remarks>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProvider.DialogViewModel">
            <summary>
            The binding source for the current dialog view.
            </summary>
            <remarks>The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> can be received from instances that implement <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource"/> by subscribing to their <see cref="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource.DialogRequested"/> event.
            When used together with the attached <see cref="F:BionicCode.Utilities.Net.Core.Wpf.Dialog.Dialog.DialogDataContextProperty"/> the setting of the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProvider.DialogViewModel"/> property automatically triggers the showing of a dialog. The <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> is rendered by a custom defined <see cref="!:DataTemplate"/> that targets the concrete type of a <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> implementation.</remarks>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource">
            <summary>
            Interface that supports notification of observers to request display of a dialog.
            The event args is the view model of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> which serves as the DataContext and binding source of the dialog.
            </summary>
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModelProviderSource.DialogRequested">
            <summary>
            Event that can be raised to notify a listening view model (or view) that the displaying of dialog is requested. The event args is the view model of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Dialog.IDialogViewModel"/> which serves as the DataContext and binding source of the dialog.
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions">
            <summary>
            Collection of extension methods e.g. visual tree traversal
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions.TryFindVisualParentElement``1(System.Windows.DependencyObject,``0@)">
            <summary>
            Traverses the visual tree towards the root until an element with a matching element name is found.
            </summary>
            <typeparam name="TParent">The type the visual parent must match.</typeparam>
            <param name="child"></param>
            <param name="resultElement"></param>
            <returns></returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions.TryFindVisualParentElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)">
            <summary>
            Traverses the visual tree towards the root until an element with a matching element type is found.
            </summary>
            <param name="child"></param>
            <param name="elementName">The element name the visual parent must match.</param>
            <param name="resultElement"></param>
            <returns></returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions.TryFindVisualChildElement``1(System.Windows.DependencyObject,``0@)">
            <summary>
            Traverses the visual tree towards the leafs until an element with a matching element type is found.
            </summary>
            <typeparam name="TChild">The type the visual child must match.</typeparam>
            <param name="parent"></param>
            <param name="resultElement"></param>
            <returns></returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions.TryFindVisualChildElementByName(System.Windows.DependencyObject,System.String,System.Windows.FrameworkElement@)">
            <summary>
            Traverses the visual tree towards the leafs until an element with a matching element name is found.
            </summary>
            <param name="parent"></param>
            <param name="childElementName">The name the visual child's name must match.</param>
            <param name="resultElement"></param>
            <returns></returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Extensions.HelperExtensions.FindVisualChildElements``1(System.Windows.DependencyObject)">
            <summary>
            Traverses the visual tree towards the leafs until all elements with a matching element type is found.
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enable deferred traversal.
            </summary>
            <typeparam name="TChildren">The type the visual children must match.</typeparam>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1">
            <summary>
            A reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand"/> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="!:Execute()"/>, <see cref="!:ExecuteAsync()"/> and <see cref="!:CanExecute()"/> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" />
            </summary>
            <remarks><c>AsyncRelayCommand</c> implements <see cref="T:System.Windows.Input.ICommand" /></remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
              Creates a new parameterless asynchronous command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsyncNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
              Creates a new asynchronous command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action)">
            <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="execute">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless command.
            </summary>
            <param name="executeNoParam"></param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
              Creates a new command.
            </summary>
            <param name="execute">The execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless asynchronous command.
            </summary>
            <param name="executeAsyncNoParam">Parameterless execute handler.</param>
            <param name="canExecuteNoParam">Parameterless can execute handler.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0})">
            <summary>
              Creates a new asynchronous command.
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.CanExecute(`0)" -->
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.Execute(`0)">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.AsyncRelayCommand`1.ExecuteAsync(`0)">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.IAsyncRelayCommand`1.Execute(`0)">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Generic.IAsyncRelayCommand`1.ExecuteAsync(`0)">
            <summary>
            Asynchronously executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.IAsyncRelayCommand.CanExecute">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.IAsyncRelayCommand.Execute">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.IAsyncRelayCommand.ExecuteAsync">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.IAsyncRelayCommand.ExecuteAsync(System.Object)">
            <summary>
            Asynchronously executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension">
            <summary>
            XAML extension to return the values of an enumeration.
            </summary>
            <example>Provide the enum type via constructor or by setting the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.EnumType"/> property:<para></para><code><ComboBox ItemsSource="{Enum {x:Type MyEnum}}" /></code>
            <para></para>
            <code><ComboBox ItemsSource="{Enum EnumType={x:Type MyEnum}}" /></code></example>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.EnumType">
            <summary>
            The enum to enumerate.
            </summary>
            <value>The type of the enum to enumerate.</value>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.#ctor(System.Type)">
            <summary>
            Constructor to initialize the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.EnumType"/> property.
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.EnumExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Markup.EqualsExtension">
            <summary>
            XAML Equality comparer.
            </summary>
            <example>Provide the enum type via constructor or by setting the <see cref="!:EnumType"/> property:<para></para><code>&lt;Trigger Property="Count" Value="{Equals /&gt;</code>
            <para></para>
            <code><ComboBox ItemsSource="{Enum EnumType={x:Type MyEnum}}" /></code></example>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode">
            <summary>
            Enumeration to set the inversion direction of the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension"/>.
            </summary>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode.Default">
            <summary>
            Default/Unset value
            </summary>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode.OneWay">
            <summary>
            Only invert value from binding source to target.
            </summary>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode.OneWayToSource">
            <summary>
            Only invert from binding target to source.
            </summary>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode.TwoWay">
            <summary>
            Invert bi-directional.
            </summary>
        </member>
        <member name="F:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode.OneTime">
            <summary>
            Only invert on initialization (from source to target).
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension">
            <summary>
            XAML extension to invert the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.Value"/> property using the current <see cref="T:BionicCode.Utilities.Net.Standard.IValueInverter"/>. Supports every <see cref="T:System.Windows.Markup.MarkupExtension"/> e.g., <see cref="T:System.Windows.Data.BindingBase"/>.
            </summary>
            <example>Provide the value locally or via data binding:
            <para><code>&lt;TextBox Text="{Invert True}" /&gt; // False</code>
            <code>&lt;TextBox Text="{Invert 12}" /&gt; // -12</code>
            <code>&lt;TextBox Text="{Invert {x:Static Visibility.Hidden}}" /&gt; // Visibility.Visible</code>
            <code>&lt;TextBox Text="{Invert {Binding TextValue}}" /&gt;</code></para></example>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.Value">
            <summary>
            The Value to invert. Can everything that the provided <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.ValueInverter"/> can invert. The value can also be a <see cref="T:System.Windows.Data.BindingBase"/> or any other <see cref="T:System.Windows.Markup.MarkupExtension"/> that can provide the invertible value.
            </summary>
            <value>The value to invert.</value>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.Mode">
            <summary>
            The inversion mode.
            </summary>
            <value>A value of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Markup.InversionMode"/>.</value>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.ValueInverter">
            <summary>
            The implementation of <see cref="T:BionicCode.Utilities.Net.Standard.IValueInverter"/>.
            </summary>
            <value>An implementation of <see cref="T:BionicCode.Utilities.Net.Standard.IValueInverter"/> to ise for the conversion.</value>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Any value that can be converted by the provided <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.ValueInverter"/>. Can be any <see cref="T:System.Windows.Markup.MarkupExtension"/> like <see cref="T:System.Windows.Data.BindingBase"/> that can provide a valid value.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Markup.InvertExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector">
            <summary>
            Exposes a basic static API to access the AppSettings file in order to manage application settings. 
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.TryReadString(System.String,System.String@)">
            <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
            <param name="key">The key that maps to a specific setting.</param>
            <param name="value">The actual settings <see cref="T:System.String"/> value of the specified key.</param>
            <returns><c>true</c> when an entry for the specified <paramref name="key"/> was found. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.TryReadInt(System.String,System.Int32@)">
            <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
            <param name="key">The key that maps to a specific setting.</param>
            <param name="value">The actual settings <see cref="T:System.Int32"/> value of the specified key.</param>
            <returns><c>true</c> when an entry for the specified <paramref name="key"/> was found. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.TryReadDouble(System.String,System.Double@)">
            <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
            <param name="key">The key that maps to a specific setting.</param>
            <param name="value">The actual settings <see cref="T:System.Double"/> value of the specified key.</param>
            <returns><c>true</c> when an entry for the specified <paramref name="key"/> was found. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.TryReadBool(System.String,System.Boolean@)">
            <summary>
            If exists, this method will return the corresponding value of the specified key.
            </summary>
            <param name="key">The key that maps to a specific setting.</param>
            <param name="value">The actual settings <see cref="T:System.Boolean"/> value of the specified key.</param>
            <returns><c>true</c> when an entry for the specified <paramref name="key"/> was found. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.WriteString(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the settings file which is stored using the specified lookup <paramref name="key"/>. If the <paramref name="key"/> already exists, the existing value will be overwritten.
            </summary>
            <param name="key">The lookup key for the <paramref name="value"/>.</param>
            <param name="value">The settings value to save to the file.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.WriteInt(System.String,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value to the settings file which is stored using the specified lookup <paramref name="key"/>. If the <paramref name="key"/> already exists, the existing value will be overwritten.
            </summary>
            <param name="key">The lookup key for the <paramref name="value"/>.</param>
            <param name="value">The settings value to save to the file.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.WriteDouble(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the settings file which is stored using the specified lookup <paramref name="key"/>. If the <paramref name="key"/> already exists, the existing value will be overwritten.
            </summary>
            <param name="key">The lookup key for the <paramref name="value"/>.</param>
            <param name="value">The settings value to save to the file.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.AppSettingsConnector.WriteBool(System.String,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the settings file which is stored using the specified lookup <paramref name="key"/>. If the <paramref name="key"/> already exists, the existing value will be overwritten.
            </summary>
            <param name="key">The lookup key for the <paramref name="value"/>.</param>
            <param name="value">The settings value to save to the file.</param>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager">
            <summary>
            Interface that describes an API that manages a MRU (Most Recently Used files) table which is stored in the AppSettings file.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.AddMostRecentlyUsedFile(System.String)">
            <summary>
            Adds a file with the specified path to the MRU table.
            </summary>
            <param name="filePath">The path to the file which is to add to the MRU table.</param>
            <remarks>Checks if the file exists. Does nothing if file doesn't exist. When the number of files in the MRU table exceeds the limit set by <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.MaxMostRecentlyUsedCount"/> the entry with the least recent access is removed from the table.</remarks>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.Clear">
            <summary>
            Clears the MRU list.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.MostRecentlyUsedFiles">
            <summary>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/> collection of <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem"/> which contains the MRU files.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.MostRecentlyUsedFile">
            <summary>
            Gets the MRU file which is the last file added to the MRU table.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.MaxMostRecentlyUsedCount">
            <summary>
            The maximum number of files that are kept in the MRU table.<br/>The default value is 10.
            </summary>
            <remarks>When the limit is exceeded, the least recent used file will be removed from the MRU table every time a new file is added. <br/>The maximum allowed value is 100. The minimum allowed value is 1.</remarks>
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.Settings.IMruManager.FileAdded">
            <summary>
            Raised when a new file was added to the MRU list. The event args contains the old and the new MostRecentlyUsedFileItem. <br/>Once the max <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem"/> limit is reached, the least used file will be removed from the list to make space for the new item. <br/>In this case the <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue"/> is the removed oldest item in the list. <br/>Otherwise <see cref="P:BionicCode.Utilities.Net.Standard.Generic.ValueChangedEventArgs`1.OldValue"/> will be <c>null</c>.
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem">
            <summary>
            An immutable item that represents a Most Recently Used file (MRU) table entry.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor
            </summary>
            <param name="fileInfo">The underlying <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo"/> of the item.</param>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.Equals(BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo">
            <summary>
            Return the underlying <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.FileInfo"/> of this instance.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.Name">
            <summary>
            Returns the file name including the extension.
            </summary>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem.FullName">
            <summary>
            Returns the full file path of the file.
            </summary>
        </member>
        <member name="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager">
            <summary>
            API that manages a MRU (Most Recently Used files) table which is stored in the AppSettings file.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.AddMostRecentlyUsedFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.Clear">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MostRecentlyUsedFiles">
            <inheritdoc />  
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MostRecentlyUsedFile">
            <inheritdoc />
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount">
            <inheritdoc />
        </member>
        <member name="E:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.FileAdded">
            <inheritdoc />
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.IsMruCountValid(System.Int32)">
            <summary>
            Property validation delegate. Validates the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount"/> property values.
            </summary>
            <param name="count">The max count value for <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MaxMostRecentlyUsedCount"/> to validate.</param>
            <returns></returns>
        </member>
        <member name="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.InternalMostRecentlyUsedFiles">
            <summary>
            The underlying collection that holds the <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem"/> elements.<br/> This collection is the source for the public <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.MostRecentlyUsedFiles"/> property, which is a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.OnFileAdded(BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem,BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem)">
            <summary>
            Called when the <see cref="P:BionicCode.Utilities.Net.Core.Wpf.Settings.MruManager.InternalMostRecentlyUsedFiles"/> has changed.
            </summary>
            <param name="oldItem">The removed <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem"/> item.</param>
            <param name="newItem">The newly added <see cref="T:BionicCode.Utilities.Net.Core.Wpf.Settings.MostRecentlyUsedFileItem"/> item.</param>
        </member>
    </members>
</doc>

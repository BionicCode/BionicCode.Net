<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:BionicCode.Controls.Net.Wpf"
                    xmlns:attachedBehaviors="clr-namespace:BionicCode.Utilities.Net;assembly=BionicCode.Utilities.Net.Wpf">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/BionicCode.Controls.Net.Wpf;component/Resources/Styles/ScrollBarStyle.xaml" />
    <ResourceDictionary Source="/BionicCode.Controls.Net.Wpf;component/Resources/Colors.xaml" />
    <ResourceDictionary Source="/BionicCode.Controls.Net.Wpf;component/Resources/Styles/SeparatorBorderStyles.xaml" />
    <ResourceDictionary
      Source="/BionicCode.Controls.Net.Wpf;component/Resources/Styles/FlipSwitchToggleButtonStyle.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <ControlTemplate x:Key="ComboBoxToggleButton"
                   TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="Pressed" />
          <VisualState x:Name="Disabled">
            <Storyboard>
              <ColorAnimationUsingKeyFrames
                Storyboard.TargetProperty="(Panel.Background).
                (SolidColorBrush.Color)"
                Storyboard.TargetName="Border">
                <EasingColorKeyFrame KeyTime="0"
                                     Value="LightGray" />
              </ColorAnimationUsingKeyFrames>
              <ColorAnimationUsingKeyFrames
                Storyboard.TargetProperty="(Shape.Fill).
                (SolidColorBrush.Color)"
                Storyboard.TargetName="Arrow">
                <EasingColorKeyFrame KeyTime="0"
                                     Value="{StaticResource DisabledForegroundColor}" />
              </ColorAnimationUsingKeyFrames>
              <ColorAnimationUsingKeyFrames
                Storyboard.TargetProperty="(Border.BorderBrush).
                (SolidColorBrush.Color)"
                Storyboard.TargetName="Border">
                <EasingColorKeyFrame KeyTime="0"
                                     Value="{StaticResource DisabledForegroundColor}" />
              </ColorAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
        <VisualStateGroup x:Name="CheckStates">
          <VisualState x:Name="Checked">
            <Storyboard>
              <ColorAnimationUsingKeyFrames
                Storyboard.TargetProperty="(Panel.Background).
                (SolidColorBrush.Color)"
                Storyboard.TargetName="Border">
                <EasingColorKeyFrame KeyTime="0"
                                     Value="{StaticResource ControlColor}" />
              </ColorAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unchecked" />
          <VisualState x:Name="Indeterminate" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border x:Name="Border"
              Grid.ColumnSpan="2"
              CornerRadius="2"
              BorderThickness="1" Background="{StaticResource ControlBrush}">
      </Border>
      <Border Grid.Column="0"
              CornerRadius="2,0,0,2"
              Margin="1" Background="{StaticResource ControlBrush}">
      </Border>
      <Path x:Name="Arrow"
            Grid.Column="1"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M 0 0 L 4 4 L 8 0 Z">
        <Path.Fill>
          <SolidColorBrush Color="{StaticResource  GlyphColor}" />
        </Path.Fill>
      </Path>
    </Grid>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBoxTextBox"
                   TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost"
            Focusable="False"
            Background="{TemplateBinding Background}" />
  </ControlTemplate>


  <Style x:Key="ListBoxItemStyle"
         TargetType="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Border"
                  Padding="2"
                  SnapsToDevicePixels="true"
                  Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource HighLightColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedUnfocused">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource HighLightColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="NumberListBoxStyle" TargetType="ItemsControl">
    <Setter Property="Width" Value="64" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="{StaticResource ControlBrush}" />
    <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="attachedBehaviors:SelectorService.IsInfiniteScrollEnabled" Value="True" />
    <Setter Property="attachedBehaviors:SelectorService.IsSelectOnScrollEnabled" Value="True" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}" />
  </Style>

  <Style x:Key="MeridiemComboBoxStyle" TargetType="ComboBox">
    <Setter Property="Width" Value="64" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="{StaticResource ControlBrush}" />
    <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
    <Setter Property="attachedBehaviors:SelectorService.IsInfiniteScrollEnabled" Value="True" />
    <Setter Property="attachedBehaviors:SelectorService.IsSelectOnScrollEnabled" Value="True" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}" />
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Disabled" />
    <Setter Property="ScrollViewer.CanContentScroll"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox"
                                                  Storyboard.TargetProperty="(TextElement.Foreground).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource DisabledForegroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="EditStates">
                <VisualState x:Name="Editable">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                   Storyboard.TargetName="PART_EditableTextBox">
                      <DiscreteObjectKeyFrame KeyTime="0"
                                              Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetProperty="(UIElement.Visibility)"
                      Storyboard.TargetName="ContentSite">
                      <DiscreteObjectKeyFrame KeyTime="0"
                                              Value="{x:Static Visibility.Hidden}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Uneditable" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ToggleButton x:Name="ToggleButton"
                          Template="{StaticResource ComboBoxToggleButton}"
                          Focusable="false"
                          ClickMode="Press"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, 
              RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter x:Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Margin="3,3,23,3"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
            </ContentPresenter>
            <TextBox x:Name="PART_EditableTextBox"
                     Style="{x:Null}"
                     Template="{StaticResource ComboBoxTextBox}"
                     HorizontalAlignment="Left"
                     VerticalAlignment="Bottom"
                     Margin="3,3,23,3"
                     Focusable="True"
                     Background="Transparent"
                     Visibility="Hidden"
                     IsReadOnly="{TemplateBinding IsReadOnly}" />
            <Popup x:Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide">
              <Grid x:Name="DropDown"
                    SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding ActualWidth}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder"
                        BorderThickness="1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="{StaticResource ControlColor}" />
                  </Border.BorderBrush>
                  <Border.Background>
                    <SolidColorBrush Color="{StaticResource ControlBackgroundColor}" />
                  </Border.Background>
                </Border>
                <ScrollViewer Margin="4,6,4,6"
                              SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True"
                              KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems"
                     Value="false">
              <Setter TargetName="DropDownBorder"
                      Property="MinHeight"
                      Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping"
                     Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                      Value="false" />
            </Trigger>
            <Trigger SourceName="Popup"
                     Property="AllowsTransparency"
                     Value="true">
              <Setter TargetName="DropDownBorder"
                      Property="CornerRadius"
                      Value="4" />
              <Setter TargetName="DropDownBorder"
                      Property="Margin"
                      Value="0,2,0,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:TimePicker}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TimePicker}">
          <StackPanel>

            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="PanelStates">
                <VisualStateGroup.States>
                  <VisualState Name="{x:Static local:TimePicker.VisualStatePickerOpen}">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PickerPanel"
                                       Storyboard.TargetProperty="MaxHeight" From="0" To="1000"
                                       Duration="0:0:0.1"/>
                    </Storyboard>
                  </VisualState>
                  <VisualState Name="{x:Static local:TimePicker.VisualStatePickerClosed}">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PickerPanel"
                                       Storyboard.TargetProperty="MaxHeight" From="1000" To="0" />
                    </Storyboard>
                  </VisualState>
                </VisualStateGroup.States>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <StackPanel Orientation="Horizontal">
                <TextBlock x:Name="DisplayLabel"
                           Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedTimeText}"
                           FontSize="12"
                           VerticalAlignment="Stretch"
                           Width="70" />
                <ToggleButton x:Name="Expander"
                              Content="Change"
                              IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsOpen}"
                              Margin="8,0"
                              FontSize="10"
                              Foreground="{StaticResource TextLinkBrush}">
                  <ToggleButton.Template>
                    <ControlTemplate TargetType="ToggleButton">
                      <TextBlock x:Name="Link"
                                 Text="{TemplateBinding Content}"
                                 VerticalAlignment="Center" />

                      <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                          <Setter TargetName="Link" Property="TextDecorations" Value="Underline" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </ToggleButton.Template>
                </ToggleButton>
              </StackPanel>
            </Border>
            <Popup x:Name="PickerPanel"
                   PlacementTarget="{Binding ElementName=Expander}"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsOpen}"
                   AllowsTransparency="True"
                   StaysOpen="True">
              <Border BorderThickness="1"
                      BorderBrush="DarkGray"
                      Background="DimGray"
                      Margin="8"
                      Padding="8">
                <Border.Effect>
                  <DropShadowEffect Opacity="0.7" Color="DimGray" />
                </Border.Effect>

                <ContentPresenter x:Name="PART_ClockHost" />
              </Border>
            </Popup>
          </StackPanel>

          <!--<ControlTemplate.Triggers>
            <Trigger Property="IsHoursEnabled" Value="False">
              <Setter TargetName="HoursColumn" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMinutesEnabled" Value="False">
              <Setter TargetName="MinutesColumn" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsSecondsEnabled" Value="False">
              <Setter TargetName="SecondsColumn" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="DisplayLabel" Property="Width" Value="52" />
            </Trigger>
            <Trigger Property="Is24HourModeEnabled" Value="False">
              <Setter TargetName="MeridiemColumn" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>
   </Style> 
   
  <!-- <Style TargetType="{x:Type local:TimePicker}"> -->
  <!--   <Setter Property="Template"> -->
  <!--     <Setter.Value> -->
  <!--       <ControlTemplate TargetType="{x:Type local:TimePicker}"> -->
  <!--         <StackPanel> -->
  <!-- -->
  <!--           <VisualStateManager.VisualStateGroups> -->
  <!--             <VisualStateGroup Name="PanelStates"> -->
  <!--               <VisualStateGroup.States> -->
  <!--                 <VisualState Name="{x:Static local:TimePicker.VisualStatePickerOpen}"> -->
  <!--                   <Storyboard> -->
  <!--                     <DoubleAnimation Storyboard.TargetName="PickerPanel" -->
  <!--                                      Storyboard.TargetProperty="Height" From="0" To="320" -->
  <!--                                      Duration="0:0:0.1"/> -->
  <!--                   </Storyboard> -->
  <!--                 </VisualState> -->
  <!--                 <VisualState Name="{x:Static local:TimePicker.VisualStatePickerClosed}"> -->
  <!--                   <Storyboard> -->
  <!--                     <DoubleAnimation Storyboard.TargetName="PickerPanel" -->
  <!--                                      Storyboard.TargetProperty="Height" From="320" To="0" /> -->
  <!--                   </Storyboard> -->
  <!--                 </VisualState> -->
  <!--               </VisualStateGroup.States> -->
  <!--             </VisualStateGroup> -->
  <!--           </VisualStateManager.VisualStateGroups> -->
  <!--           <Border Background="{TemplateBinding Background}" -->
  <!--                   BorderBrush="{TemplateBinding BorderBrush}" -->
  <!--                   BorderThickness="{TemplateBinding BorderThickness}"> -->
  <!--             <StackPanel Orientation="Horizontal"> -->
  <!--               <TextBlock x:Name="DisplayLabel" -->
  <!--                          Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedTimeText}" -->
  <!--                          FontSize="12" -->
  <!--                          VerticalAlignment="Stretch" -->
  <!--                          Width="70" /> -->
  <!--               <ToggleButton x:Name="Expander" -->
  <!--                             Content="Change" -->
  <!--                             IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsOpen}" -->
  <!--                             Margin="8,0" -->
  <!--                             FontSize="10" -->
  <!--                             Foreground="{StaticResource TextLinkBrush}"> -->
  <!--                 <ToggleButton.Template> -->
  <!--                   <ControlTemplate TargetType="ToggleButton"> -->
  <!--                     <TextBlock x:Name="Link" -->
  <!--                                Text="{TemplateBinding Content}" -->
  <!--                                VerticalAlignment="Center" /> -->
  <!-- -->
  <!--                     <ControlTemplate.Triggers> -->
  <!--                       <Trigger Property="IsMouseOver" Value="True"> -->
  <!--                         <Setter TargetName="Link" Property="TextDecorations" Value="Underline" /> -->
  <!--                       </Trigger> -->
  <!--                     </ControlTemplate.Triggers> -->
  <!--                   </ControlTemplate> -->
  <!--                 </ToggleButton.Template> -->
  <!--               </ToggleButton> -->
  <!--             </StackPanel> -->
  <!--           </Border> -->
  <!--           <Popup x:Name="PickerPanel" -->
  <!--                  Height="0" -->
  <!--                  PlacementTarget="{Binding ElementName=Expander}" -->
  <!--                  IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsOpen}" -->
  <!--                  AllowsTransparency="True" -->
  <!--                  StaysOpen="False"> -->
  <!--             <Border BorderThickness="1" -->
  <!--                     BorderBrush="DarkGray" -->
  <!--                     Background="DimGray" -->
  <!--                     Margin="8" -->
  <!--                     Padding="8"> -->
  <!--               <Border.Effect> -->
  <!--                 <DropShadowEffect Opacity="0.7" Color="DimGray" /> -->
  <!--               </Border.Effect> -->
  <!--               <StackPanel> -->
  <!--                 <StackPanel Margin="0,0,0,8"> -->
  <!--                   <TextBlock Text="{TemplateBinding SelectedTimeText}" -->
  <!--                              FontSize="44" -->
  <!--                              FontStretch="UltraExpanded" -->
  <!--                              FontWeight="UltraLight" -->
  <!--                              HorizontalAlignment="Center" -->
  <!--                              Foreground="{StaticResource TextLightBrush}" -->
  <!--                              Margin="0,0,0,16" /> -->
  <!--                   <ToggleButton Style="{StaticResource FlipSwitchToggleButtonStyle}" -->
  <!--                                 IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Is24HourModeEnabled}" -->
  <!--                                 Content="24h" -->
  <!--                                 HorizontalAlignment="Left" -->
  <!--                                 VerticalAlignment="Center" /> -->
  <!--                 </StackPanel> -->
  <!--                 <StackPanel Orientation="Horizontal" Height="200"> -->
  <!--                   <DockPanel x:Name="HoursColumn"> -->
  <!--                     <TextBlock DockPanel.Dock="Top" Text="Hours" Foreground="{StaticResource TextLightBrush}" /> -->
  <!--                     <Border Style="{StaticResource HorizontalSeparatorBorderStyle}" DockPanel.Dock="Top" /> -->
  <!--                     <ListBox ItemsSource="{TemplateBinding HoursSource}" -->
  <!--                              SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedHours}" -->
  <!--                              Style="{StaticResource NumberListBoxStyle}" /> -->
  <!--                   </DockPanel> -->
  <!--                   <DockPanel x:Name="MinutesColumn"> -->
  <!--                     <Border Style="{StaticResource VerticalSeparatorBorderStyle}" DockPanel.Dock="Left" /> -->
  <!-- -->
  <!--                     <TextBlock DockPanel.Dock="Top" Text="Minutes" Foreground="{StaticResource TextLightBrush}" /> -->
  <!--                     <Border Style="{StaticResource HorizontalSeparatorBorderStyle}" DockPanel.Dock="Top" /> -->
  <!--                     <ListBox ItemsSource="{TemplateBinding MinutesSecondsSource}" -->
  <!--                              SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedMinutes}" -->
  <!--                              Style="{StaticResource NumberListBoxStyle}" /> -->
  <!--                   </DockPanel> -->
  <!--                   <DockPanel x:Name="SecondsColumn"> -->
  <!--                     <Border Style="{StaticResource VerticalSeparatorBorderStyle}" DockPanel.Dock="Left" /> -->
  <!--                     <TextBlock DockPanel.Dock="Top" Text="Seconds" Foreground="{StaticResource TextLightBrush}" /> -->
  <!--                     <Border Style="{StaticResource HorizontalSeparatorBorderStyle}" DockPanel.Dock="Top" /> -->
  <!--                     <ListBox x:Name="Seconds" -->
  <!--                              ItemsSource="{TemplateBinding MinutesSecondsSource}" -->
  <!--                              SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedSeconds}" -->
  <!--                              Style="{StaticResource NumberListBoxStyle}" /> -->
  <!--                   </DockPanel> -->
  <!--                   <DockPanel x:Name="MeridiemColumn" -->
  <!--                              Visibility="Collapsed"> -->
  <!--                     <Border Style="{StaticResource VerticalSeparatorBorderStyle}" DockPanel.Dock="Left" /> -->
  <!--                     <TextBlock DockPanel.Dock="Top" Text="Meridiem" Foreground="{StaticResource TextLightBrush}" /> -->
  <!--                     <Border Style="{StaticResource HorizontalSeparatorBorderStyle}" DockPanel.Dock="Top" /> -->
  <!--                     <ComboBox x:Name="MeridiemSelector" -->
  <!--                               ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MeridiemSource}" -->
  <!--                               SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path= SelectedMeridiem}" -->
  <!--                               VerticalContentAlignment="Center" -->
  <!--                               Style="{StaticResource MeridiemComboBoxStyle}" /> -->
  <!--                   </DockPanel> -->
  <!--                 </StackPanel> -->
  <!--               </StackPanel> -->
  <!--             </Border> -->
  <!--           </Popup> -->
  <!--         </StackPanel> -->
  <!-- -->
  <!--         <ControlTemplate.Triggers> -->
  <!--           <Trigger Property="IsHoursEnabled" Value="False"> -->
  <!--             <Setter TargetName="HoursColumn" Property="Visibility" Value="Collapsed" /> -->
  <!--           </Trigger> -->
  <!--           <Trigger Property="IsMinutesEnabled" Value="False"> -->
  <!--             <Setter TargetName="MinutesColumn" Property="Visibility" Value="Collapsed" /> -->
  <!--           </Trigger> -->
  <!--           <Trigger Property="IsSecondsEnabled" Value="False"> -->
  <!--             <Setter TargetName="SecondsColumn" Property="Visibility" Value="Collapsed" /> -->
  <!--             <Setter TargetName="DisplayLabel" Property="Width" Value="52" /> -->
  <!--           </Trigger> -->
  <!--           <Trigger Property="Is24HourModeEnabled" Value="False"> -->
  <!--             <Setter TargetName="MeridiemColumn" Property="Visibility" Value="Visible" /> -->
  <!--           </Trigger> -->
  <!--         </ControlTemplate.Triggers> -->
  <!--       </ControlTemplate> -->
  <!--     </Setter.Value> -->
  <!--   </Setter> -->
  <!-- </Style> -->
</ResourceDictionary>